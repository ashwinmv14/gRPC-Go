// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/ad_events.proto

package adevent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdEventService_SendAdEvent_FullMethodName      = "/adevent.AdEventService/SendAdEvent"
	AdEventService_SendAdEventBatch_FullMethodName = "/adevent.AdEventService/SendAdEventBatch"
	AdEventService_HealthCheck_FullMethodName      = "/adevent.AdEventService/HealthCheck"
)

// AdEventServiceClient is the client API for AdEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for Ad Event Processing
type AdEventServiceClient interface {
	// Send a single ad event
	SendAdEvent(ctx context.Context, in *SendAdEventRequest, opts ...grpc.CallOption) (*SendAdEventResponse, error)
	// Send multiple ad events in a batch
	SendAdEventBatch(ctx context.Context, in *SendAdEventBatchRequest, opts ...grpc.CallOption) (*SendAdEventBatchResponse, error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type adEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdEventServiceClient(cc grpc.ClientConnInterface) AdEventServiceClient {
	return &adEventServiceClient{cc}
}

func (c *adEventServiceClient) SendAdEvent(ctx context.Context, in *SendAdEventRequest, opts ...grpc.CallOption) (*SendAdEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendAdEventResponse)
	err := c.cc.Invoke(ctx, AdEventService_SendAdEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adEventServiceClient) SendAdEventBatch(ctx context.Context, in *SendAdEventBatchRequest, opts ...grpc.CallOption) (*SendAdEventBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendAdEventBatchResponse)
	err := c.cc.Invoke(ctx, AdEventService_SendAdEventBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adEventServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AdEventService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdEventServiceServer is the server API for AdEventService service.
// All implementations must embed UnimplementedAdEventServiceServer
// for forward compatibility.
//
// Service definition for Ad Event Processing
type AdEventServiceServer interface {
	// Send a single ad event
	SendAdEvent(context.Context, *SendAdEventRequest) (*SendAdEventResponse, error)
	// Send multiple ad events in a batch
	SendAdEventBatch(context.Context, *SendAdEventBatchRequest) (*SendAdEventBatchResponse, error)
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAdEventServiceServer()
}

// UnimplementedAdEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdEventServiceServer struct{}

func (UnimplementedAdEventServiceServer) SendAdEvent(context.Context, *SendAdEventRequest) (*SendAdEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdEvent not implemented")
}
func (UnimplementedAdEventServiceServer) SendAdEventBatch(context.Context, *SendAdEventBatchRequest) (*SendAdEventBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdEventBatch not implemented")
}
func (UnimplementedAdEventServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAdEventServiceServer) mustEmbedUnimplementedAdEventServiceServer() {}
func (UnimplementedAdEventServiceServer) testEmbeddedByValue()                        {}

// UnsafeAdEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdEventServiceServer will
// result in compilation errors.
type UnsafeAdEventServiceServer interface {
	mustEmbedUnimplementedAdEventServiceServer()
}

func RegisterAdEventServiceServer(s grpc.ServiceRegistrar, srv AdEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdEventService_ServiceDesc, srv)
}

func _AdEventService_SendAdEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAdEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdEventServiceServer).SendAdEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdEventService_SendAdEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdEventServiceServer).SendAdEvent(ctx, req.(*SendAdEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdEventService_SendAdEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAdEventBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdEventServiceServer).SendAdEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdEventService_SendAdEventBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdEventServiceServer).SendAdEventBatch(ctx, req.(*SendAdEventBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdEventService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdEventServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdEventService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdEventServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdEventService_ServiceDesc is the grpc.ServiceDesc for AdEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adevent.AdEventService",
	HandlerType: (*AdEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAdEvent",
			Handler:    _AdEventService_SendAdEvent_Handler,
		},
		{
			MethodName: "SendAdEventBatch",
			Handler:    _AdEventService_SendAdEventBatch_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AdEventService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ad_events.proto",
}
